---

- name: include OS specific configuration ({{ ansible_distribution }} ({{ ansible_os_family }}) {{ ansible_distribution_major_version }})
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20.04 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yml"
        # eg. redhat / debian / archlinux
        - "{{ ansible_os_family | lower }}.yml"
        # artixlinux
        - "{{ ansible_os_family | lower | replace(' ', '') }}.yml"
        - default.yaml
      skip: true

- name: install dependency
  ansible.builtin.package:
    name: "{{ prometheus_requirements }}"
    state: present
  when:
    - prometheus_requirements | default([]) | count > 0

- name: merge prometheus configuration between defaults and custom
  ansible.builtin.set_fact:
    prometheus_service: "{{ prometheus_defaults_service | combine(prometheus_service, recursive=True) }}"
    prometheus_global: "{{ prometheus_defaults_global | combine(prometheus_global, recursive=True) }}"
    prometheus_alerting: "{{ prometheus_defaults_alerting | combine(prometheus_alerting, recursive=True) }}"
    prometheus_remote_write: "{{ prometheus_defaults_remote_write | union(prometheus_remote_write) }}"
    prometheus_remote_read: "{{ prometheus_defaults_remote_read | combine(prometheus_remote_read, recursive=True) }}"
    prometheus_storage: "{{ prometheus_defaults_storage | combine(prometheus_storage, recursive=True) }}"
    prometheus_tracing: "{{ prometheus_defaults_tracing | combine(prometheus_tracing, recursive=True) }}"
    prometheus_rule_files: "{{ prometheus_defaults_rule_files | union(prometheus_rule_files) }}"
    prometheus_scrape_configs: "{{ prometheus_defaults_scrape_configs | union(prometheus_scrape_configs) }}"

# -----------

- name: validate file_sd config in prometheus_scrape_configs
  ansible.builtin.set_fact:
    missing_target_definition: "{{ prometheus_scrape_configs | bodsch.prometheus.validate_file_sd(prometheus_file_sd_targets) }}"

- name: Fail when file_sd targets are not defined in prometheus_scrape_configs
  ansible.builtin.fail:
    msg: "For the following files a definition in prometheus_file_sd_targets is missing:\n
      {{ missing_target_definition | join('\n') }}"
  when:
    - missing_target_definition is defined
    - missing_target_definition | count > 0

- name: validate alertmanager endpoints
  when:
    - prometheus_alerting is defined
    - prometheus_alerting.alertmanagers is defined
    - prometheus_alerting.alertmanagers | count > 0
  block:
    - name: validate alertmanager configs
      ansible.builtin.set_fact:
        validated_endpoints: "{{ prometheus_alerting.alertmanagers | bodsch.prometheus.validate_alertmanager_endpoints }}"

    - name: Fail when the endpoints not present or not supported
      ansible.builtin.fail:
        msg: "The Alertmanager endpoint ar not valid!\nPlease check your config!\n
             Currently supported endpoints are:\n
              - {{ validated_endpoints[2] | join('\n - ') }}\n
             found endpoints:\n
              - {{ validated_endpoints[1] | default(['']) | join('\n - ') }}\n"
      when:
        - validated_endpoints is defined
        - validated_endpoints[0] is defined
        - not validated_endpoints[0]

...
